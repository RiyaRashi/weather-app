{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","city","setCity","search","setSearch","weather","setWeather","sys","setSys","Date","date","setDate","weekday","Array","useEffect","timer","setInterval","clearInterval","a","url","fetch","response","json","resJson","main","console","log","fetchApi","className","temp","type","value","onChange","event","target","country","toLocaleDateString","getDay","toLocaleTimeString","description","feels_like","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA+FeA,G,MA7FC,WAAO,IAAD,EACMC,mBAAS,MADf,mBACXC,EADW,KACLC,EADK,OAEUF,mBAAS,UAFnB,mBAEXG,EAFW,KAEHC,EAFG,OAGYJ,mBAAS,MAHrB,mBAGXK,EAHW,KAGFC,EAHE,OAIIN,mBAAS,MAJb,mBAIXO,EAJW,KAINC,EAJM,OAKMR,mBAAS,IAAIS,MALnB,mBAKXC,EALW,KAKLC,EALK,KAMdC,EAAU,IAAIC,MAAM,GA8BxB,OA7BAD,EAAQ,GAAK,SACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,UACbA,EAAQ,GAAK,YACbA,EAAQ,GAAK,WACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,WACbE,qBAAU,WACN,IAAIC,EAAQC,aAAY,kBAAML,EAAQ,IAAIF,QAAS,KACnD,OAAO,WACHQ,cAAcF,OAGtBD,qBAAU,YACQ,uCAAG,gCAAAI,EAAA,6DACPC,EADO,2DACmDhB,EADnD,iEAEUiB,MAAMD,GAFhB,cAEPE,EAFO,gBAISA,EAASC,OAJlB,OAIPC,EAJO,OAMbrB,EAAQqB,EAAQC,MAChBC,QAAQC,IAAIH,EAAQC,MACpBlB,EAAWiB,EAAQlB,SACnBoB,QAAQC,IAAIH,EAAQlB,SACpBG,EAAOe,EAAQhB,KACfkB,QAAQC,IAAIH,EAAQhB,KAXP,4CAAH,qDAadoB,KACD,CAACxB,IAEA,qBAAKyB,UAAY3B,EAAUA,EAAK4B,KAAO,GAAM,WAAa,MAAS,KAAnE,SAEI,iCACI,iCACI,qBAAKD,UAAU,aAAf,SAEI,uBAAOE,KAAK,SACRC,MAAO5B,EACPyB,UAAU,aACVI,SAAU,SAACC,GACP7B,EAAU6B,EAAMC,OAAOH,cAMpC9B,GAASM,GAAQF,EAIZ,8BACI,sBAAKuB,UAAU,eAAf,UACI,qBAAIA,UAAU,WAAd,UAEI,mBAAGA,UAAU,gCAAmCzB,EAFpD,IAGaI,EAAI4B,WAEjB,sBAAKP,UAAU,OAAf,UACKlB,EAAK0B,qBADV,KACkCxB,EAAQF,EAAK2B,UAAU,uBACpD3B,EAAK4B,qBAAqB,0BAG/B,sBAAKV,UAAU,cAAf,UACI,qBAAIA,UAAU,OAAd,UACK3B,EAAK4B,KADV,aAIA,sBAAKD,UAAU,UAAf,eAA4BvB,EAAQ,GAAGkC,kBAE3C,qBAAIX,UAAU,aAAd,wBAEgB3B,EAAKuC,WAFrB,UAEoC,uBAFpC,OAGCvC,EAAKwC,SAHN,iBAG2BxC,EAAKyC,SAHhC,UAG6C,+BAxBzD,0CAAY,uBAAZ,0BC9CLC,MAPf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.707ffd98.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport \"./css/weather.css\";\r\nconst Weather = () => {\r\n    const [city, setCity] = useState(null);\r\n    const [search, setSearch] = useState(\"Mumbai\");\r\n    const [weather, setWeather] = useState(null);\r\n    const [sys, setSys] = useState(null);\r\n    const [date, setDate] = useState(new Date());\r\n    var weekday = new Array(7);\r\n    weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";\r\n    useEffect(() => {\r\n        var timer = setInterval(() => setDate(new Date()), 1000)\r\n        return function cleanup() {\r\n            clearInterval(timer);\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=9134f2bb45593ab008f080b052d2d63e`\r\n            const response = await fetch(url);\r\n            // console.log(response);\r\n            const resJson = await response.json();\r\n            //console.log(resJson);\r\n            setCity(resJson.main);\r\n            console.log(resJson.main);\r\n            setWeather(resJson.weather);\r\n            console.log(resJson.weather);\r\n            setSys(resJson.sys);\r\n            console.log(resJson.sys);\r\n        }\r\n        fetchApi();\r\n    }, [search])\r\n    return (\r\n        <div className={(city) ? ((city.temp > 16) ? 'app warm' : 'app') : 'no'}>\r\n\r\n            <main>\r\n                <center>\r\n                    <div className='search-box'>\r\n\r\n                        <input type=\"search\"\r\n                            value={search}\r\n                            className='search-bar'\r\n                            onChange={(event) => {\r\n                                setSearch(event.target.value)\r\n                            }}\r\n                        />\r\n\r\n                    </div>\r\n                </center>\r\n                {(!city || !sys || !weather) ? (\r\n\r\n                    <h1>Opsss...<br></br>no data found</h1>\r\n                ) : (\r\n                        <div >\r\n                            <div className='location-box'>\r\n                                <h2 className='location'>\r\n\r\n                                    <i className=\"fas fa-street-view  white  \"></i>{search},\r\n                                            {sys.country}\r\n                                </h2>\r\n                                <div className=\"date\">\r\n                                    {date.toLocaleDateString()}, {weekday[date.getDay()]}<br />\r\n                                    {date.toLocaleTimeString()}<br />\r\n\r\n                                </div>\r\n                                <div className='weather-box'>\r\n                                    <h1 className='temp'>\r\n                                        {city.temp}째Cel\r\n\r\n                                         </h1>\r\n                                    <div className='weather'>  {weather[0].description}</div>\r\n                                </div>\r\n                                <h3 className=\"tempminmax\">\r\n\r\n                                    feels like:{city.feels_like}째Cel<br />\r\n                            min:{city.temp_min}째Cel | max:{city.temp_max}째Cel<br />\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n            </main>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Weather;\r\n\r\n\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <Weather/>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}